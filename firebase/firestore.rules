rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /expenseLists1/{expenseListId} {
      // Allow creation of new lists
      allow create: if request.auth != null && 
                    request.resource.data.ownerId == request.auth.uid;
      
      // Allow reading existing lists
      allow read: if request.auth != null && (
          request.auth.uid == resource.data.ownerId || 
          request.auth.token.email in resource.data.sharedEmails
      );
      
      // Allow updates by the owner to any fields
      allow update: if request.auth != null && 
                    request.auth.uid == resource.data.ownerId;
      
      // Allow shared users to update only the totalAmount field
      allow update: if request.auth != null && 
                    request.auth.token.email in resource.data.sharedEmails &&
                    request.resource.data.diff(resource.data).affectedKeys().hasOnly(['totalAmount']);
      
      // Allow deletion only by the owner
      allow delete: if request.auth != null && 
                    request.auth.uid == resource.data.ownerId;
      
      // Rules for the expenses subcollection
      match /expenses/{expenseId} {
        // Allow read if user has access to the parent list
        allow read: if request.auth != null && (
            get(/databases/$(database)/documents/expenseLists1/$(expenseListId)).data.ownerId == request.auth.uid ||
            request.auth.token.email in get(/databases/$(database)/documents/expenseLists1/$(expenseListId)).data.sharedEmails
        );
        
        // Allow create/update if user has access to the parent list
        allow create, update: if request.auth != null && (
            get(/databases/$(database)/documents/expenseLists1/$(expenseListId)).data.ownerId == request.auth.uid ||
            request.auth.token.email in get(/databases/$(database)/documents/expenseLists1/$(expenseListId)).data.sharedEmails
        );
        
        // Allow delete if user is list owner or the person who created the expense
        allow delete: if request.auth != null && (
            get(/databases/$(database)/documents/expenseLists1/$(expenseListId)).data.ownerId == request.auth.uid ||
            request.auth.token.email == resource.data.createdByEmail
        );
      }
      
      // Rules for the settlements subcollection
      match /settlements/{settlementId} {
        // Allow reading if user has access to the parent list and is involved in the settlement
        allow read: if request.auth != null && 
                    (get(/databases/$(database)/documents/expenseLists1/$(expenseListId)).data.ownerId == request.auth.uid ||
                    request.auth.token.email in get(/databases/$(database)/documents/expenseLists1/$(expenseListId)).data.sharedEmails);
        
        // Allow creating a settlement in two cases:
        // Case 1: Standard - user is the payer (fromEmail)
        // Case 2: External - user is the receiver (toEmail) AND settlement is pre-confirmed
        allow create: if request.auth != null && 
                      (get(/databases/$(database)/documents/expenseLists1/$(expenseListId)).data.ownerId == request.auth.uid ||
                      request.auth.token.email in get(/databases/$(database)/documents/expenseLists1/$(expenseListId)).data.sharedEmails) &&
                      (
                        // Case 1: Regular settlement (user is payer)
                        (request.auth.token.email == request.resource.data.fromEmail &&
                         request.auth.token.email == request.resource.data.createdByEmail) ||
                        // Case 2: External settlement (user is receiver and pre-confirms)
                        (request.auth.token.email == request.resource.data.toEmail &&
                         request.auth.token.email == request.resource.data.createdByEmail &&
                         request.auth.token.email == request.resource.data.confirmedByEmail &&
                         request.resource.data.status == "confirmed")
                      );
        
        // Allow updating if user has access to the parent list, is the recipient, and only updating specific fields
        allow update: if request.auth != null && 
                      (get(/databases/$(database)/documents/expenseLists1/$(expenseListId)).data.ownerId == request.auth.uid ||
                      request.auth.token.email in get(/databases/$(database)/documents/expenseLists1/$(expenseListId)).data.sharedEmails) &&
                      request.auth.token.email == resource.data.toEmail &&
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'confirmedByEmail', 'confirmedDate']);
      }
    }
    
    match /activityLogs/{logId} {
      // Only allow reads for authenticated users
      allow read: if request.auth != null;
      allow create: if request.auth != null; // Allow creating log entries
      allow update, delete: if false; // No updates or deletions to logs
    }
  }
}